package net.auto.async.processor;

import com.google.auto.service.AutoService;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.util.concurrent.ListenableFuture;
import com.squareup.javapoet.*;
import net.auto.async.Asyncable;
import net.auto.async.AutoAsync;
import net.auto.async.AutoGenerated;

import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.*;
import javax.lang.model.util.ElementFilter;
import java.lang.annotation.Annotation;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;

/**
 * @author Xs
 */
@AutoService(Processor.class)
public class AutoAsyncProcessor extends AnnotationProcessorSupport {

    private static final String INTERFACE_PREFIX = "Unified_";
    private static final String METHOD_PREFIX = "async_";
    private static final ClassName LF_CLASSNAME = ClassName.bestGuess(ListenableFuture.class.getName());

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        return ImmutableSet.of(AutoAsync.class.getName());
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        Collection<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(AutoAsync.class);
        List<TypeElement> types = new ImmutableList.Builder<TypeElement>()
                .addAll(ElementFilter.typesIn(annotatedElements))
                .build();
        for (final TypeElement typeElement : types) {
            if (typeElement.getKind() != ElementKind.INTERFACE) {
                reportError(typeElement, "Only classes can be annotated with @%s", AutoAsync.class.getSimpleName());
                return true;
            }
            try {
                List<MethodSpec> methodSpecs = new ArrayList<MethodSpec>();
                for (Element enclosed : typeElement.getEnclosedElements()) {
                    if (enclosed.getKind() == ElementKind.METHOD) {
                        ExecutableElement executableElement = (ExecutableElement) enclosed;
                        Asyncable asyncable = executableElement.getAnnotation(Asyncable.class);
                        if (asyncable != null) {
                            methodSpecs.add(processExecutableElement(executableElement));
                        }
                    }
                }
                if (methodSpecs.isEmpty()) {
                    continue;
                }
                TypeSpec asyncInterface = TypeSpec.interfaceBuilder(INTERFACE_PREFIX + getSimpleTypeName(typeElement))
                        .addModifiers(Modifier.PUBLIC)
                        .addSuperinterface(TypeName.get(typeElement.asType()))
                        .addMethods(methodSpecs)
                        .addAnnotation(AnnotationSpec.get(new AutoGenerated() {

                            @Override
                            public Class<? extends Annotation> annotationType() {
                                return AutoGenerated.class;
                            }

                            @Override
                            public String value() {
                                return "net.auto.async.processor.AutoAsyncProcessor";
                            }

                            @Override
                            public boolean generateFacade() {
                                return typeElement.getAnnotation(AutoAsync.class).generateFacade();
                            }
                        }))
                        .build();

                generateJavaFile(getPackageName(typeElement), asyncInterface);
            } catch (Exception e) {
                reportError(typeElement, "Create javaFile failed cause @%s ", e.getMessage());
                return true;
            }
        }
        return false;
    }

    protected MethodSpec processExecutableElement(ExecutableElement executableElement) {
        List<ParameterSpec> parameterSpecs = new ArrayList<ParameterSpec>();
        for (Element element : executableElement.getParameters()) {
            ParameterSpec parameterSpec = processVariableElement((VariableElement) element);
            parameterSpecs.add(parameterSpec);
        }
        TypeName originReturnTypeName = TypeName.get(executableElement.getReturnType());
        originReturnTypeName = originReturnTypeName.box();
        TypeName newReturnTypeName = ParameterizedTypeName.get(LF_CLASSNAME, originReturnTypeName);
        return MethodSpec
                .methodBuilder(METHOD_PREFIX + executableElement.getSimpleName().toString())
                .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
                .returns(newReturnTypeName)
                .addParameters(parameterSpecs)
                .build();
    }
}
